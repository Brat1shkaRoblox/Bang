
-- AdminPanelServer.lua
-- Full admin panel script assembled for Roblox Studio.
-- (This file was generated by ChatGPT based on the user's requested features.)
-- NOTE: Review and test in a safe environment before using on live servers.

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local Debris = game:GetService("Debris")
local DataStoreService = game:GetService("DataStoreService")
local TeleportService = game:GetService("TeleportService")

-- RemoteEvent
local AdminEvent = Instance.new("RemoteEvent")
AdminEvent.Name = "AdminEvent"
AdminEvent.Parent = ReplicatedStorage

-- Admins table (edit names/levels as needed)
local Admins = {
    ["Player1"] = 3,
    ["Player2"] = 2,
    ["Player3"] = 1,
}

-- DataStores
local BanStore = DataStoreService:GetDataStore("AdminBans")
local MuteStore = DataStoreService:GetDataStore("AdminMutes")

-- Logging
local function LogAction(admin, action, target)
    local msg = string.format("[%s] %s -> %s", os.date("%Y-%m-%d %H:%M:%S"), admin and admin.Name or "SYSTEM", action)
    if target then
        if typeof(target) == "Instance" and target:IsA("Player") then
            msg = msg .. " " .. target.Name
        elseif typeof(target) == "string" then
            msg = msg .. " " .. target
        end
    end
    print(msg)
    local LogsFolder = ServerStorage:FindFirstChild("AdminLogs") or Instance.new("Folder", ServerStorage)
    LogsFolder.Name = "AdminLogs"
    local logEntry = Instance.new("StringValue")
    logEntry.Value = msg
    logEntry.Parent = LogsFolder
end

-- Permission check
local function HasPermission(player, level)
    return (Admins[player.Name] or 0) >= level
end

-- Helpers
local function FindPlayerByName(name)
    if not name then return nil end
    for _, p in ipairs(Players:GetPlayers()) do
        if string.lower(p.Name) == string.lower(name) then
            return p
        end
    end
    return nil
end

local function HasCharacter(player)
    return player and player.Character and player.Character.PrimaryPart
end

local function TeleportPlayer(player, target)
    if HasCharacter(player) and HasCharacter(target) then
        player.Character:SetPrimaryPartCFrame(target.Character.PrimaryPart.CFrame + Vector3.new(0,3,0))
    end
end

local function GiveTool(player, toolName)
    if not player or not toolName then return end
    local tool = ServerStorage:FindFirstChild(toolName)
    if tool and player:FindFirstChild("Backpack") then
        tool:Clone().Parent = player.Backpack
    end
end

local function FreezePlayer(player)
    if HasCharacter(player) then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid.JumpPower = 0
            LogAction(nil, "freeze", player)
        end
    end
end

local function UnfreezePlayer(player)
    if HasCharacter(player) then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
            LogAction(nil, "unfreeze", player)
        end
    end
end

local function GodMode(player, enable)
    if HasCharacter(player) then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = humanoid.MaxHealth
            humanoid.Name = enable and "[GOD] "..player.Name or player.Name
            LogAction(nil, "godmode", player)
        end
    end
end

local function IgnitePlayer(player, duration)
    if HasCharacter(player) then
        local part = player.Character:FindFirstChild("HumanoidRootPart")
        if part then
            local fire = Instance.new("Fire")
            fire.Size = 5
            fire.Heat = 10
            fire.Parent = part
            Debris:AddItem(fire, duration or 5)
            LogAction(nil, "ignite", player)
        end
    end
end

local function HealPlayer(player)
    if HasCharacter(player) then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = humanoid.MaxHealth
            LogAction(nil, "heal", player)
        end
    end
end

local function SpeedPlayer(player, speed)
    if HasCharacter(player) then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = speed or 50
            LogAction(nil, "speed", player)
        end
    end
end

local function Invisibility(player, enable)
    if HasCharacter(player) then
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.Transparency = enable and 1 or 0
                part.CanCollide = not enable
            end
        end
        LogAction(nil, enable and "invisible" or "visible", player)
    end
end

local function RemoveItems(player)
    if not player then return end
    if player:FindFirstChild("Backpack") then
        for _, item in ipairs(player.Backpack:GetChildren()) do
            item:Destroy()
        end
    end
    if HasCharacter(player) then
        for _, item in ipairs(player.Character:GetChildren()) do
            if item:IsA("Tool") then item:Destroy() end
        end
    end
    LogAction(nil, "removeitems", player)
end

-- DataStore helpers
local function BanPlayerDataStore(player)
    if not player then return end
    pcall(function() BanStore:SetAsync(tostring(player.UserId), true) end)
    LogAction(nil, "banDataStore", player)
end

local function MutePlayerDataStore(player)
    if not player then return end
    pcall(function() MuteStore:SetAsync(tostring(player.UserId), true) end)
    LogAction(nil, "muteDataStore", player)
end

local function UnmutePlayerDataStore(player)
    if not player then return end
    pcall(function() MuteStore:SetAsync(tostring(player.UserId), false) end)
    LogAction(nil, "unmuteDataStore", player)
end

-- Types and Hooks
local Types = {
    PlayerType = function(arg) return FindPlayerByName(arg) end,
    NumberType = function(arg) return tonumber(arg) end,
    StringType = function(arg) return tostring(arg) end,
    BooleanType = function(arg)
        if not arg then return false end
        local val = string.lower(tostring(arg))
        return val == "true" or val == "yes" or val == "1"
    end,
}

local Hooks = { PreCommand = {}, PostCommand = {} }

local function AddHook(hookType, func)
    if Hooks[hookType] then table.insert(Hooks[hookType], func) end
end

local function CallHooks(hookType, player, command, args)
    if Hooks[hookType] then
        for _, func in ipairs(Hooks[hookType]) do
            pcall(func, player, command, args)
        end
    end
end

-- Effects
local function SpawnPartEffect(position, size, color, material, duration)
    local part = Instance.new("Part")
    part.Anchored = true
    part.Size = size or Vector3.new(2,2,2)
    part.Position = position or Vector3.new(0,5,0)
    pcall(function() part.BrickColor = BrickColor.new(color or "White") end)
    part.Material = material or Enum.Material.Plastic
    part.Parent = workspace
    Debris:AddItem(part, duration or 10)
end

local function DiscoEffect()
    for i = 1, 50 do
        local pos = Vector3.new(math.random(-50,50),5,math.random(-50,50))
        SpawnPartEffect(pos, Vector3.new(5,1,5), "Bright red", Enum.Material.Neon, 5)
    end
    LogAction(nil, "DiscoEvent")
end

local function SnowEffect()
    for i = 1, 60 do
        local pos = Vector3.new(math.random(-100,100),50,math.random(-100,100))
        SpawnPartEffect(pos, Vector3.new(1,1,1), "White", Enum.Material.Snow, 10)
    end
    LogAction(nil, "SnowEvent")
end

local function TacoEffect()
    for i = 1, 30 do
        local pos = Vector3.new(math.random(-50,50),5,math.random(-50,50))
        SpawnPartEffect(pos, Vector3.new(2,2,2), "Bright yellow", Enum.Material.Plastic, 8)
    end
    LogAction(nil, "TacoEvent")
end

local function CrabRaveEffect()
    for i = 1, 40 do
        local pos = Vector3.new(math.random(-50,50),5,math.random(-50,50))
        SpawnPartEffect(pos, Vector3.new(3,1,3), "Bright red", Enum.Material.Plastic, 8)
    end
    LogAction(nil, "CrabRaveEvent")
end

local function RainbowEffect()
    for i = 1, 50 do
        local pos = Vector3.new(math.random(-50,50),5,math.random(-50,50))
        SpawnPartEffect(pos, Vector3.new(4,1,4), BrickColor.Random().Name, Enum.Material.Neon, 8)
    end
    LogAction(nil, "RainbowEvent")
end

local function SnapEffect()
    for _, p in ipairs(Players:GetPlayers()) do
        if HasCharacter(p) then
            local hrp = p.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = CFrame.new(math.random(-100,100),10,math.random(-100,100))
            end
        end
    end
    LogAction(nil, "SnapEvent")
end

-- Commands table
local Commands = {}

-- Basic commands
Commands.kick = function(admin, targetName, reason)
    if not HasPermission(admin, 1) then return end
    local target = Types.PlayerType(targetName)
    if target then
        target:Kick(reason or "Kicked by admin")
        LogAction(admin, "kick", target)
    end
end

Commands.ban = function(admin, targetName, reason)
    if not HasPermission(admin, 2) then return end
    local target = Types.PlayerType(targetName)
    if target then
        BanPlayerDataStore(target)
        target:Kick(reason or "Banned by admin")
        LogAction(admin, "ban", target)
    end
end

Commands.tp = function(admin, targetName, destName)
    if not HasPermission(admin, 1) then return end
    local target = Types.PlayerType(targetName)
    local dest = Types.PlayerType(destName)
    if target and dest then
        TeleportPlayer(target, dest)
        LogAction(admin, "tp", target)
    end
end

Commands.give = function(admin, targetName, toolName)
    if not HasPermission(admin, 1) then return end
    local target = Types.PlayerType(targetName)
    if target then
        GiveTool(target, toolName)
        LogAction(admin, "give", toolName)
    end
end

Commands.freeze = function(admin, targetName)
    if not HasPermission(admin, 1) then return end
    FreezePlayer(Types.PlayerType(targetName))
end

Commands.unfreeze = function(admin, targetName)
    if not HasPermission(admin, 1) then return end
    UnfreezePlayer(Types.PlayerType(targetName))
end

Commands.god = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    GodMode(Types.PlayerType(targetName), true)
end

Commands.ungod = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    GodMode(Types.PlayerType(targetName), false)
end

Commands.ignite = function(admin, targetName, dur)
    if not HasPermission(admin, 1) then return end
    IgnitePlayer(Types.PlayerType(targetName), tonumber(dur) or 5)
end

Commands.heal = function(admin, targetName)
    if not HasPermission(admin, 1) then return end
    HealPlayer(Types.PlayerType(targetName))
end

Commands.speed = function(admin, targetName, value)
    if not HasPermission(admin, 1) then return end
    SpeedPlayer(Types.PlayerType(targetName), tonumber(value) or 50)
end

Commands.invis = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    Invisibility(Types.PlayerType(targetName), true)
end

Commands.vis = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    Invisibility(Types.PlayerType(targetName), false)
end

Commands.removeitems = function(admin, targetName)
    if not HasPermission(admin, 1) then return end
    RemoveItems(Types.PlayerType(targetName))
end

-- Events commands
Commands.disco = function(admin) if not HasPermission(admin,2) then return end; DiscoEffect(); LogAction(admin,"disco") end
Commands.snow = function(admin) if not HasPermission(admin,2) then return end; SnowEffect(); LogAction(admin,"snow") end
Commands.taco = function(admin) if not HasPermission(admin,2) then return end; TacoEffect(); LogAction(admin,"taco") end
Commands.crabrave = function(admin) if not HasPermission(admin,2) then return end; CrabRaveEffect(); LogAction(admin,"crabrave") end
Commands.rainbow = function(admin) if not HasPermission(admin,2) then return end; RainbowEffect(); LogAction(admin,"rainbow") end
Commands.snap = function(admin) if not HasPermission(admin,3) then return end; SnapEffect(); LogAction(admin,"snap") end

-- Mass commands
Commands.kickall = function(admin, reason)
    if not HasPermission(admin, 3) then return end
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= admin then p:Kick(reason or "Kicked by admin") end
    end
    LogAction(admin, "kickall")
end

Commands.banall = function(admin, reason)
    if not HasPermission(admin, 3) then return end
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= admin then BanPlayerDataStore(p); p:Kick(reason or "Banned by admin") end
    end
    LogAction(admin, "banall")
end

Commands.healall = function(admin)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do HealPlayer(p) end
    LogAction(admin, "healall")
end

Commands.freezeall = function(admin)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do FreezePlayer(p) end
    LogAction(admin, "freezeall")
end

Commands.unfreezeall = function(admin)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do UnfreezePlayer(p) end
    LogAction(admin, "unfreezeall")
end

Commands.speedall = function(admin, speed)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do SpeedPlayer(p, tonumber(speed) or 50) end
    LogAction(admin, "speedall")
end

Commands.godall = function(admin)
    if not HasPermission(admin, 3) then return end
    for _, p in ipairs(Players:GetPlayers()) do GodMode(p, true) end
    LogAction(admin, "godall")
end

Commands.invisall = function(admin)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do Invisibility(p, true) end
    LogAction(admin, "invisall")
end

Commands.visall = function(admin)
    if not HasPermission(admin, 2) then return end
    for _, p in ipairs(Players:GetPlayers()) do Invisibility(p, false) end
    LogAction(admin, "visall")
end

-- TeleportService commands
Commands.teleportserver = function(admin, placeId)
    if not HasPermission(admin, 3) then return end
    local id = tonumber(placeId)
    if id then TeleportService:Teleport(id, admin); LogAction(admin, "teleportserver", id) end
end

Commands.teleportplayer = function(admin, targetName, placeId)
    if not HasPermission(admin, 3) then return end
    local target = Types.PlayerType(targetName)
    local id = tonumber(placeId)
    if target and id then TeleportService:Teleport(id, target); LogAction(admin, "teleportplayer", target.Name .. "->" .. tostring(id)) end
end

-- Spam event commands
Commands.spamdisco = function(admin, amount)
    if not HasPermission(admin, 3) then return end
    for i = 1, (tonumber(amount) or 10) do DiscoEffect() end
    LogAction(admin, "spamdisco")
end

Commands.spamsnow = function(admin, amount)
    if not HasPermission(admin, 3) then return end
    for i = 1, (tonumber(amount) or 10) do SnowEffect() end
    LogAction(admin, "spamsnow")
end

Commands.spamtaco = function(admin, amount)
    if not HasPermission(admin, 3) then return end
    for i = 1, (tonumber(amount) or 10) do TacoEffect() end
    LogAction(admin, "spamtaco")
end

Commands.spamcrab = function(admin, amount)
    if not HasPermission(admin, 3) then return end
    for i = 1, (tonumber(amount) or 10) do CrabRaveEffect() end
    LogAction(admin, "spamcrab")
end

Commands.spamrainbow = function(admin, amount)
    if not HasPermission(admin, 3) then return end
    for i = 1, (tonumber(amount) or 10) do RainbowEffect() end
    LogAction(admin, "spamrainbow")
end

-- Mute/unmute using DataStore
Commands.mute = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    local target = Types.PlayerType(targetName)
    if target then MutePlayerDataStore(target); LogAction(admin, "mute", target) end
end

Commands.unmute = function(admin, targetName)
    if not HasPermission(admin, 2) then return end
    local target = Types.PlayerType(targetName)
    if target then UnmutePlayerDataStore(target); LogAction(admin, "unmute", target) end
end

-- Hooks examples
AddHook("PreCommand", function(player, cmd, args)
    print("[HOOK PRE] " .. player.Name .. " -> " .. tostring(cmd))
end)
AddHook("PostCommand", function(player, cmd, args)
    print("[HOOK POST] " .. player.Name .. " -> " .. tostring(cmd))
end)

-- Chat command handling
Players.PlayerAdded:Connect(function(player)
    -- Check ban on join
    local ok, banned = pcall(function() return BanStore:GetAsync(tostring(player.UserId)) end)
    if ok and banned then
        player:Kick("You are banned from this game")
        return
    end

    player.Chatted:Connect(function(msg)
        if type(msg) ~= "string" then return end
        if string.sub(msg,1,1) == ";" then
            local args = string.split(msg, " ")
            local cmd = string.sub(args[1], 2):lower()
            table.remove(args, 1)
            CallHooks("PreCommand", player, cmd, args)
            if Commands[cmd] then
                local parsed = {}
                for _, a in ipairs(args) do table.insert(parsed, Types.StringType(a)) end
                pcall(function() Commands[cmd](player, unpack(parsed)) end)
            end
            CallHooks("PostCommand", player, cmd, args)
        end
    end)
end)

-- RemoteEvent GUI integration
AdminEvent.OnServerEvent:Connect(function(player, action, params)
    if not HasPermission(player, 1) then return end
    if Commands[action] then
        pcall(function() Commands[action](player, unpack(params or {})) end)
    end
end)

-- Ready
print("AdminPanelServer.lua loaded. Commands available: " .. table.concat((function()
    local keys = {}
    for k,_ in pairs(Commands) do table.insert(keys, k) end
    return keys
end)(), ", "))

